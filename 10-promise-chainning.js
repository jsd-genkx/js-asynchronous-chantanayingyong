const orderPizza = () => {
	return new Promise((resolve, reject) => {
		const pizzaReady = Math.random() > 0.2;
		setTimeout(() => {
			if (pizzaReady) {
				resolve("üçï Pizza is ready!");
			} else {
				reject("‚ùå Sorry, pizza oven broke!");
			}
		}, 3000);
	});
};

const orderDrink = () => {
	return new Promise((resolve, reject) => {
		const drinkReady = Math.random() > 0.5;
		setTimeout(() => {
			if (drinkReady) {
				resolve("ü•§ Drink is ready!");
			} else {
				reject("‚ùå Sorry, we ran out of drinks!");
			}
		}, 1000);
	});
};
//‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å promise (pizza) ‡∏Å‡πá‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏î‡∏π promise(drink) ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏° 
// ‡πÄ‡∏ä‡πà‡∏ô‡πÑ‡∏î‡πâ pizza ‡πÅ‡∏ï‡πà‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏° ‡∏Å‡πá‡∏à‡∏∞ error
export const promiseChaining = () => {
	console.log("üìù Starting order‚Ä¶");

	orderPizza()
		.then((pizza) => {
			console.log("‚úÖ", pizza);
			return orderDrink(); // chain to next promise
		})
		.then((drink) => {
			console.log("‚úÖ", drink);
		})
		.catch((error) => {
			console.error("‚ö†Ô∏è Something went wrong:", error);
		})
		.finally(() => {
			console.log("‚ÑπÔ∏è Order process finished. Ready for the next order!");
		});
};

// promiseChaining();
